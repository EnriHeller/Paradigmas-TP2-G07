@startuml
hide circle
skinparam classAttributeIconSize 0

class Juego{
    -historialDeRondas: List(Rondas)
    -jugadores: List(Jugador)
    -ganador: Jugador
    -tablero: Tablero
    +obtenerGanadorJuego():Jugador
    +prepararJuego():void
    +faseDeJuego():void
}

class Ronda{
    -ganador: Jugador
    -turnos : List(Turno)
    -cartasJugador1: List(Unidad)
    -cartasJugador2: List(Unidad)
    +obtenerGanadorRonda():Jugador
}

class Turno{
    -jugador: Jugador
    -turno: int
    +obtenerTurno(): Jugador
    +actualizarTurno(): void
    -tirarMoneda(): int
}

class Jugador {
    -nombre : String
    -pilaDeDescartes : "List(Unidad)"
    -mano: "List(Unidad,Especial)"
    +nuevoJugador(nombre:String, mazo:Mazo)
    +jugarCarta(cartaDelMazo : Unidad) : Unidad
    +descartarCarta(carta: Carta)
    +pasar() : void
}

class constructorDeMazos{
    -cartas: List(Carta)
    +obtenerMazoAleatorio():Mazo
}

class Mazo {
    -cartas: List(Carta)
    +sacarCarta() : Carta
    +Mezclar(): void
}

class Tablero {
    +obtenerPuntajesJugadores() : "Map(Jugador, int)"
    +obtenerManoActual(jugador : Jugador) : "List(Unidad o Especial)"
    +Limpiar():void
}

class Unidad {
    -nombre : String
    -puntos : Int
    -seccion : String
    +getPuntos() : int
    +getNombre() : String
}

class Especial {
    -nombre : String
    +activar(): void
    +getNombre() : String
}

class TierraArrasada extends Especial
class MoraleBoost extends Especial
class Clima extends Especial

class Modificador {
    -nombre : String
    +getNombre() : String
}

class Legendaria extends Unidad
class Medico extends Unidad
class Agil extends Unidad
class CartasUnidas extends Unidad
class Espia extends Unidad
class SumaValorBase extends Unidad

Juego ..> constructorDeMazos
Jugador --> Mazo
Tablero o-- Jugador
Mazo o-- "6 o Más" Especial
Mazo o-- "15 o Más" Unidad
Unidad *-- Modificador

@enduml
